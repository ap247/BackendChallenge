// <auto-generated />
using System;
using BackendChallenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendChallenge.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220123040444_CreateModels")]
    partial class CreateModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("BackendChallenge.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BackendChallenge.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("BackendChallenge.Models.Incentive", b =>
                {
                    b.Property<int>("IncentiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IncentiveName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleEligibility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceRequirementDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("IncentiveId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Incentives");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlan", b =>
                {
                    b.Property<int>("LearningPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearningPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("LearningPlans");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlanItem", b =>
                {
                    b.Property<int>("LearningPlanItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IncentiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningItemStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningItemType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearningPlanItemId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IncentiveId");

                    b.HasIndex("LearningPlanId");

                    b.ToTable("LearningPlanItems");
                });

            modelBuilder.Entity("BackendChallenge.Models.ManagementRelationship", b =>
                {
                    b.Property<int>("ManagementRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManageeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ManagementRelationshipId");

                    b.HasIndex("ManageeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ManagementRelationships");
                });

            modelBuilder.Entity("BackendChallenge.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TenureDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendChallenge.Models.UserToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BackendChallenge.Models.Incentive", b =>
                {
                    b.HasOne("BackendChallenge.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlan", b =>
                {
                    b.HasOne("BackendChallenge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlanItem", b =>
                {
                    b.HasOne("BackendChallenge.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("BackendChallenge.Models.Incentive", "Incentive")
                        .WithMany()
                        .HasForeignKey("IncentiveId");

                    b.HasOne("BackendChallenge.Models.LearningPlan", "LearningPlan")
                        .WithMany("LearningPlanItems")
                        .HasForeignKey("LearningPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Incentive");

                    b.Navigation("LearningPlan");
                });

            modelBuilder.Entity("BackendChallenge.Models.ManagementRelationship", b =>
                {
                    b.HasOne("BackendChallenge.Models.User", "Managee")
                        .WithMany()
                        .HasForeignKey("ManageeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendChallenge.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Managee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BackendChallenge.Models.User", b =>
                {
                    b.HasOne("BackendChallenge.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackendChallenge.Models.UserToken", b =>
                {
                    b.HasOne("BackendChallenge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlan", b =>
                {
                    b.Navigation("LearningPlanItems");
                });
#pragma warning restore 612, 618
        }
    }
}
