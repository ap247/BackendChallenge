// <auto-generated />
using System;
using BackendChallenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendChallenge.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("BackendChallenge.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "Acme Inc."
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "General Co."
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseName = "Intro to Machine Learning"
                        },
                        new
                        {
                            CourseId = 2,
                            CourseName = "Data Structures and Algorithms"
                        },
                        new
                        {
                            CourseId = 3,
                            CourseName = "Principles of Communication"
                        },
                        new
                        {
                            CourseId = 4,
                            CourseName = "Managerial Economics"
                        },
                        new
                        {
                            CourseId = 5,
                            CourseName = "Design Thinking"
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.Incentive", b =>
                {
                    b.Property<int>("IncentiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IncentiveName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleEligibility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceRequirementDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("IncentiveId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Incentives");

                    b.HasData(
                        new
                        {
                            IncentiveId = 1,
                            CompanyId = 1,
                            IncentiveName = "Completion Bonus",
                            RoleEligibility = 0,
                            ServiceRequirementDays = 90
                        },
                        new
                        {
                            IncentiveId = 2,
                            CompanyId = 1,
                            IncentiveName = "Software Engineering Scholarship",
                            RoleEligibility = 0,
                            ServiceRequirementDays = 180
                        },
                        new
                        {
                            IncentiveId = 3,
                            CompanyId = 1,
                            IncentiveName = "20% Time",
                            RoleEligibility = 1,
                            ServiceRequirementDays = 90
                        },
                        new
                        {
                            IncentiveId = 4,
                            CompanyId = 2,
                            IncentiveName = "Software Engineering Scholarship",
                            RoleEligibility = 0,
                            ServiceRequirementDays = 30
                        },
                        new
                        {
                            IncentiveId = 5,
                            CompanyId = 2,
                            IncentiveName = "20% Time",
                            RoleEligibility = 1,
                            ServiceRequirementDays = 90
                        },
                        new
                        {
                            IncentiveId = 6,
                            CompanyId = 1,
                            IncentiveName = "Management Scholarship",
                            RoleEligibility = 2,
                            ServiceRequirementDays = 0
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlan", b =>
                {
                    b.Property<int>("LearningPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearningPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("LearningPlans");

                    b.HasData(
                        new
                        {
                            LearningPlanId = 1,
                            PlanStatus = 2,
                            UserId = 1
                        },
                        new
                        {
                            LearningPlanId = 2,
                            PlanStatus = 0,
                            UserId = 1
                        },
                        new
                        {
                            LearningPlanId = 3,
                            PlanStatus = 0,
                            UserId = 2
                        },
                        new
                        {
                            LearningPlanId = 4,
                            PlanStatus = 0,
                            UserId = 3
                        },
                        new
                        {
                            LearningPlanId = 5,
                            PlanStatus = 1,
                            UserId = 4
                        },
                        new
                        {
                            LearningPlanId = 6,
                            PlanStatus = 1,
                            UserId = 4
                        },
                        new
                        {
                            LearningPlanId = 7,
                            PlanStatus = 0,
                            UserId = 5
                        },
                        new
                        {
                            LearningPlanId = 8,
                            PlanStatus = 0,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlanItem", b =>
                {
                    b.Property<int>("LearningPlanItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IncentiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningItemStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningItemType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearningPlanItemId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IncentiveId");

                    b.HasIndex("LearningPlanId");

                    b.ToTable("LearningPlanItems");

                    b.HasData(
                        new
                        {
                            LearningPlanItemId = 1,
                            CourseId = 1,
                            LearningItemStatus = 0,
                            LearningItemType = 0,
                            LearningPlanId = 1
                        },
                        new
                        {
                            LearningPlanItemId = 2,
                            IncentiveId = 1,
                            LearningItemStatus = 0,
                            LearningItemType = 1,
                            LearningPlanId = 1
                        },
                        new
                        {
                            LearningPlanItemId = 3,
                            CourseId = 4,
                            LearningItemStatus = 0,
                            LearningItemType = 0,
                            LearningPlanId = 3
                        },
                        new
                        {
                            LearningPlanItemId = 4,
                            CourseId = 5,
                            LearningItemStatus = 0,
                            LearningItemType = 0,
                            LearningPlanId = 3
                        },
                        new
                        {
                            LearningPlanItemId = 5,
                            IncentiveId = 1,
                            LearningItemStatus = 0,
                            LearningItemType = 1,
                            LearningPlanId = 3
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.ManagementRelationship", b =>
                {
                    b.Property<int>("ManagementRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManageeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ManagementRelationshipId");

                    b.HasIndex("ManageeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ManagementRelationships");

                    b.HasData(
                        new
                        {
                            ManagementRelationshipId = 1,
                            ManageeId = 2,
                            ManagerId = 1
                        },
                        new
                        {
                            ManagementRelationshipId = 2,
                            ManageeId = 3,
                            ManagerId = 2
                        },
                        new
                        {
                            ManagementRelationshipId = 3,
                            ManageeId = 4,
                            ManagerId = 2
                        },
                        new
                        {
                            ManagementRelationshipId = 4,
                            ManageeId = 6,
                            ManagerId = 5
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TenureDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CompanyId = 1,
                            FirstName = "Karalynn",
                            LastName = "Northcote",
                            TenureDays = 365
                        },
                        new
                        {
                            UserId = 2,
                            CompanyId = 1,
                            FirstName = "Sean",
                            LastName = "Carter",
                            TenureDays = 250
                        },
                        new
                        {
                            UserId = 3,
                            CompanyId = 1,
                            FirstName = "Fielding",
                            LastName = "Cabera",
                            TenureDays = 5
                        },
                        new
                        {
                            UserId = 4,
                            CompanyId = 1,
                            FirstName = "Dan",
                            LastName = "Fawlkes",
                            TenureDays = 150
                        },
                        new
                        {
                            UserId = 5,
                            CompanyId = 2,
                            FirstName = "Pete",
                            LastName = "Peterson",
                            TenureDays = 120
                        },
                        new
                        {
                            UserId = 6,
                            CompanyId = 2,
                            FirstName = "Jane",
                            LastName = "Rowe",
                            TenureDays = 119
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.UserToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");

                    b.HasData(
                        new
                        {
                            Token = "1MEYQDDgwrTkYPtu7Vhfyjp7qkuGnf4ztR",
                            UserId = 1
                        },
                        new
                        {
                            Token = "1F7Xg1CJdffsnv9uEXj6GhLERQSam4xwx6",
                            UserId = 2
                        },
                        new
                        {
                            Token = "1CAZ4osj74GJDsjYHkTcoJrWXDGyazcsLr",
                            UserId = 3
                        },
                        new
                        {
                            Token = "1DeyjK5vvSwjc9o9jYArVo2yov2SnjnXEE",
                            UserId = 4
                        },
                        new
                        {
                            Token = "13ZaMF5UhrKpNeykfMQi2dXWR7TfdVdnmK",
                            UserId = 5
                        },
                        new
                        {
                            Token = "1GdK8dmV8mDetnWV9kdchqSgXxBDMjz4ia",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("BackendChallenge.Models.Incentive", b =>
                {
                    b.HasOne("BackendChallenge.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlan", b =>
                {
                    b.HasOne("BackendChallenge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlanItem", b =>
                {
                    b.HasOne("BackendChallenge.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("BackendChallenge.Models.Incentive", "Incentive")
                        .WithMany()
                        .HasForeignKey("IncentiveId");

                    b.HasOne("BackendChallenge.Models.LearningPlan", "LearningPlan")
                        .WithMany("LearningPlanItems")
                        .HasForeignKey("LearningPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Incentive");

                    b.Navigation("LearningPlan");
                });

            modelBuilder.Entity("BackendChallenge.Models.ManagementRelationship", b =>
                {
                    b.HasOne("BackendChallenge.Models.User", "Managee")
                        .WithMany()
                        .HasForeignKey("ManageeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendChallenge.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Managee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BackendChallenge.Models.User", b =>
                {
                    b.HasOne("BackendChallenge.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackendChallenge.Models.UserToken", b =>
                {
                    b.HasOne("BackendChallenge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendChallenge.Models.LearningPlan", b =>
                {
                    b.Navigation("LearningPlanItems");
                });
#pragma warning restore 612, 618
        }
    }
}
